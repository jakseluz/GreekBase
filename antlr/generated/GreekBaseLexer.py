# Generated from antlr/GreekBaseLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,62,408,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,
        1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,
        1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,
        1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,
        1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,1,34,
        1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,
        1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,
        1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,
        1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,4,53,331,8,53,11,53,12,53,
        332,1,54,4,54,336,8,54,11,54,12,54,337,1,54,1,54,4,54,342,8,54,11,
        54,12,54,343,1,55,1,55,5,55,348,8,55,10,55,12,55,351,9,55,1,55,1,
        55,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,3,57,368,8,57,1,58,1,58,5,58,372,8,58,10,58,12,58,375,9,58,1,
        59,1,59,1,59,1,59,5,59,381,8,59,10,59,12,59,384,9,59,1,59,1,59,1,
        60,1,60,1,60,1,60,5,60,392,8,60,10,60,12,60,395,9,60,1,60,1,60,1,
        60,1,60,1,60,1,61,4,61,403,8,61,11,61,12,61,404,1,61,1,61,2,349,
        393,0,62,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,113,57,115,58,117,59,119,60,121,61,123,62,1,0,5,1,0,48,
        57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,10,10,
        13,13,3,0,9,10,13,13,32,32,416,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,
        0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,
        0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,
        1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,
        1,125,1,0,0,0,3,131,1,0,0,0,5,135,1,0,0,0,7,138,1,0,0,0,9,143,1,
        0,0,0,11,148,1,0,0,0,13,153,1,0,0,0,15,159,1,0,0,0,17,163,1,0,0,
        0,19,166,1,0,0,0,21,170,1,0,0,0,23,177,1,0,0,0,25,187,1,0,0,0,27,
        196,1,0,0,0,29,199,1,0,0,0,31,204,1,0,0,0,33,210,1,0,0,0,35,213,
        1,0,0,0,37,219,1,0,0,0,39,223,1,0,0,0,41,228,1,0,0,0,43,232,1,0,
        0,0,45,238,1,0,0,0,47,240,1,0,0,0,49,242,1,0,0,0,51,246,1,0,0,0,
        53,252,1,0,0,0,55,257,1,0,0,0,57,264,1,0,0,0,59,269,1,0,0,0,61,272,
        1,0,0,0,63,274,1,0,0,0,65,277,1,0,0,0,67,279,1,0,0,0,69,282,1,0,
        0,0,71,284,1,0,0,0,73,287,1,0,0,0,75,289,1,0,0,0,77,291,1,0,0,0,
        79,293,1,0,0,0,81,295,1,0,0,0,83,299,1,0,0,0,85,303,1,0,0,0,87,306,
        1,0,0,0,89,310,1,0,0,0,91,312,1,0,0,0,93,314,1,0,0,0,95,316,1,0,
        0,0,97,318,1,0,0,0,99,321,1,0,0,0,101,323,1,0,0,0,103,325,1,0,0,
        0,105,327,1,0,0,0,107,330,1,0,0,0,109,335,1,0,0,0,111,345,1,0,0,
        0,113,354,1,0,0,0,115,367,1,0,0,0,117,369,1,0,0,0,119,376,1,0,0,
        0,121,387,1,0,0,0,123,402,1,0,0,0,125,126,5,98,0,0,126,127,5,101,
        0,0,127,128,5,103,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,2,
        1,0,0,0,131,132,5,101,0,0,132,133,5,110,0,0,133,134,5,100,0,0,134,
        4,1,0,0,0,135,136,5,105,0,0,136,137,5,102,0,0,137,6,1,0,0,0,138,
        139,5,116,0,0,139,140,5,104,0,0,140,141,5,101,0,0,141,142,5,110,
        0,0,142,8,1,0,0,0,143,144,5,101,0,0,144,145,5,108,0,0,145,146,5,
        115,0,0,146,147,5,101,0,0,147,10,1,0,0,0,148,149,5,108,0,0,149,150,
        5,111,0,0,150,151,5,111,0,0,151,152,5,112,0,0,152,12,1,0,0,0,153,
        154,5,119,0,0,154,155,5,104,0,0,155,156,5,105,0,0,156,157,5,108,
        0,0,157,158,5,101,0,0,158,14,1,0,0,0,159,160,5,102,0,0,160,161,5,
        111,0,0,161,162,5,114,0,0,162,16,1,0,0,0,163,164,5,105,0,0,164,165,
        5,110,0,0,165,18,1,0,0,0,166,167,5,111,0,0,167,168,5,117,0,0,168,
        169,5,116,0,0,169,20,1,0,0,0,170,171,5,114,0,0,171,172,5,101,0,0,
        172,173,5,116,0,0,173,174,5,117,0,0,174,175,5,114,0,0,175,176,5,
        110,0,0,176,22,1,0,0,0,177,178,5,112,0,0,178,179,5,114,0,0,179,180,
        5,111,0,0,180,181,5,99,0,0,181,182,5,101,0,0,182,183,5,100,0,0,183,
        184,5,117,0,0,184,185,5,114,0,0,185,186,5,101,0,0,186,24,1,0,0,0,
        187,188,5,102,0,0,188,189,5,117,0,0,189,190,5,110,0,0,190,191,5,
        99,0,0,191,192,5,116,0,0,192,193,5,105,0,0,193,194,5,111,0,0,194,
        195,5,110,0,0,195,26,1,0,0,0,196,197,5,105,0,0,197,198,5,115,0,0,
        198,28,1,0,0,0,199,200,5,116,0,0,200,201,5,121,0,0,201,202,5,112,
        0,0,202,203,5,101,0,0,203,30,1,0,0,0,204,205,5,97,0,0,205,206,5,
        114,0,0,206,207,5,114,0,0,207,208,5,97,0,0,208,209,5,121,0,0,209,
        32,1,0,0,0,210,211,5,111,0,0,211,212,5,102,0,0,212,34,1,0,0,0,213,
        214,5,99,0,0,214,215,5,111,0,0,215,216,5,110,0,0,216,217,5,115,0,
        0,217,218,5,116,0,0,218,36,1,0,0,0,219,220,5,117,0,0,220,221,5,115,
        0,0,221,222,5,101,0,0,222,38,1,0,0,0,223,224,5,119,0,0,224,225,5,
        105,0,0,225,226,5,116,0,0,226,227,5,104,0,0,227,40,1,0,0,0,228,229,
        5,110,0,0,229,230,5,101,0,0,230,231,5,119,0,0,231,42,1,0,0,0,232,
        233,5,112,0,0,233,234,5,114,0,0,234,235,5,105,0,0,235,236,5,110,
        0,0,236,237,5,116,0,0,237,44,1,0,0,0,238,239,5,123,0,0,239,46,1,
        0,0,0,240,241,5,125,0,0,241,48,1,0,0,0,242,243,5,105,0,0,243,244,
        5,110,0,0,244,245,5,116,0,0,245,50,1,0,0,0,246,247,5,102,0,0,247,
        248,5,108,0,0,248,249,5,111,0,0,249,250,5,97,0,0,250,251,5,116,0,
        0,251,52,1,0,0,0,252,253,5,99,0,0,253,254,5,104,0,0,254,255,5,97,
        0,0,255,256,5,114,0,0,256,54,1,0,0,0,257,258,5,115,0,0,258,259,5,
        116,0,0,259,260,5,114,0,0,260,261,5,105,0,0,261,262,5,110,0,0,262,
        263,5,103,0,0,263,56,1,0,0,0,264,265,5,98,0,0,265,266,5,111,0,0,
        266,267,5,111,0,0,267,268,5,108,0,0,268,58,1,0,0,0,269,270,5,58,
        0,0,270,271,5,61,0,0,271,60,1,0,0,0,272,273,5,61,0,0,273,62,1,0,
        0,0,274,275,5,47,0,0,275,276,5,61,0,0,276,64,1,0,0,0,277,278,5,60,
        0,0,278,66,1,0,0,0,279,280,5,60,0,0,280,281,5,61,0,0,281,68,1,0,
        0,0,282,283,5,62,0,0,283,70,1,0,0,0,284,285,5,62,0,0,285,286,5,61,
        0,0,286,72,1,0,0,0,287,288,5,43,0,0,288,74,1,0,0,0,289,290,5,45,
        0,0,290,76,1,0,0,0,291,292,5,42,0,0,292,78,1,0,0,0,293,294,5,47,
        0,0,294,80,1,0,0,0,295,296,5,109,0,0,296,297,5,111,0,0,297,298,5,
        100,0,0,298,82,1,0,0,0,299,300,5,97,0,0,300,301,5,110,0,0,301,302,
        5,100,0,0,302,84,1,0,0,0,303,304,5,111,0,0,304,305,5,114,0,0,305,
        86,1,0,0,0,306,307,5,110,0,0,307,308,5,111,0,0,308,309,5,116,0,0,
        309,88,1,0,0,0,310,311,5,46,0,0,311,90,1,0,0,0,312,313,5,58,0,0,
        313,92,1,0,0,0,314,315,5,59,0,0,315,94,1,0,0,0,316,317,5,44,0,0,
        317,96,1,0,0,0,318,319,5,61,0,0,319,320,5,62,0,0,320,98,1,0,0,0,
        321,322,5,40,0,0,322,100,1,0,0,0,323,324,5,41,0,0,324,102,1,0,0,
        0,325,326,5,91,0,0,326,104,1,0,0,0,327,328,5,93,0,0,328,106,1,0,
        0,0,329,331,7,0,0,0,330,329,1,0,0,0,331,332,1,0,0,0,332,330,1,0,
        0,0,332,333,1,0,0,0,333,108,1,0,0,0,334,336,7,0,0,0,335,334,1,0,
        0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,339,1,0,
        0,0,339,341,5,46,0,0,340,342,7,0,0,0,341,340,1,0,0,0,342,343,1,0,
        0,0,343,341,1,0,0,0,343,344,1,0,0,0,344,110,1,0,0,0,345,349,5,34,
        0,0,346,348,9,0,0,0,347,346,1,0,0,0,348,351,1,0,0,0,349,350,1,0,
        0,0,349,347,1,0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,353,5,34,
        0,0,353,112,1,0,0,0,354,355,5,39,0,0,355,356,9,0,0,0,356,357,5,39,
        0,0,357,114,1,0,0,0,358,359,5,84,0,0,359,360,5,114,0,0,360,361,5,
        117,0,0,361,368,5,101,0,0,362,363,5,70,0,0,363,364,5,97,0,0,364,
        365,5,108,0,0,365,366,5,115,0,0,366,368,5,101,0,0,367,358,1,0,0,
        0,367,362,1,0,0,0,368,116,1,0,0,0,369,373,7,1,0,0,370,372,7,2,0,
        0,371,370,1,0,0,0,372,375,1,0,0,0,373,371,1,0,0,0,373,374,1,0,0,
        0,374,118,1,0,0,0,375,373,1,0,0,0,376,377,5,45,0,0,377,378,5,45,
        0,0,378,382,1,0,0,0,379,381,8,3,0,0,380,379,1,0,0,0,381,384,1,0,
        0,0,382,380,1,0,0,0,382,383,1,0,0,0,383,385,1,0,0,0,384,382,1,0,
        0,0,385,386,6,59,0,0,386,120,1,0,0,0,387,388,5,47,0,0,388,389,5,
        42,0,0,389,393,1,0,0,0,390,392,9,0,0,0,391,390,1,0,0,0,392,395,1,
        0,0,0,393,394,1,0,0,0,393,391,1,0,0,0,394,396,1,0,0,0,395,393,1,
        0,0,0,396,397,5,42,0,0,397,398,5,47,0,0,398,399,1,0,0,0,399,400,
        6,60,0,0,400,122,1,0,0,0,401,403,7,4,0,0,402,401,1,0,0,0,403,404,
        1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,
        6,61,0,0,407,124,1,0,0,0,10,0,332,337,343,349,367,373,382,393,404,
        1,6,0,0
    ]

class GreekBaseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    KW_BEGIN = 1
    KW_END = 2
    KW_IF = 3
    KW_THEN = 4
    KW_ELSE = 5
    KW_LOOP = 6
    KW_WHILE = 7
    KW_FOR = 8
    KW_IN = 9
    KW_OUT = 10
    KW_RETURN = 11
    KW_PROCEDURE = 12
    KW_FUNCTION = 13
    KW_IS = 14
    KW_TYPE = 15
    KW_ARRAY = 16
    KW_OF = 17
    KW_CONST = 18
    KW_USE = 19
    KW_WITH = 20
    KW_NEW = 21
    KW_PRINT = 22
    KW_LCURL = 23
    KW_RCURL = 24
    KW_INT = 25
    KW_FLOAT = 26
    KW_CHAR = 27
    KW_STRING = 28
    KW_BOOL = 29
    OP_ASSIGN = 30
    OP_EQUAL = 31
    OP_NOT_EQUAL = 32
    OP_LESS = 33
    OP_LESS_EQ = 34
    OP_GREATER = 35
    OP_GREATER_EQ = 36
    OP_ADD = 37
    OP_SUB = 38
    OP_MUL = 39
    OP_DIV = 40
    OP_MOD = 41
    OP_AND = 42
    OP_OR = 43
    OP_NOT = 44
    OP_DOT = 45
    OP_COLON = 46
    OP_SEMICOLON = 47
    OP_COMMA = 48
    OP_ARROW = 49
    OP_LPAREN = 50
    OP_RPAREN = 51
    OP_LBRACKET = 52
    OP_RBRACKET = 53
    LIT_INT = 54
    LIT_FLOAT = 55
    LIT_STRING = 56
    LIT_CHAR = 57
    LIT_BOOL = 58
    IDENTIFIER = 59
    LINE_COMMENT = 60
    MULTILINE_COMMENT = 61
    WS = 62

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'begin'", "'end'", "'if'", "'then'", "'else'", "'loop'", "'while'", 
            "'for'", "'in'", "'out'", "'return'", "'procedure'", "'function'", 
            "'is'", "'type'", "'array'", "'of'", "'const'", "'use'", "'with'", 
            "'new'", "'print'", "'{'", "'}'", "'int'", "'float'", "'char'", 
            "'string'", "'bool'", "':='", "'='", "'/='", "'<'", "'<='", 
            "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'mod'", "'and'", 
            "'or'", "'not'", "'.'", "':'", "';'", "','", "'=>'", "'('", 
            "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "KW_BEGIN", "KW_END", "KW_IF", "KW_THEN", "KW_ELSE", "KW_LOOP", 
            "KW_WHILE", "KW_FOR", "KW_IN", "KW_OUT", "KW_RETURN", "KW_PROCEDURE", 
            "KW_FUNCTION", "KW_IS", "KW_TYPE", "KW_ARRAY", "KW_OF", "KW_CONST", 
            "KW_USE", "KW_WITH", "KW_NEW", "KW_PRINT", "KW_LCURL", "KW_RCURL", 
            "KW_INT", "KW_FLOAT", "KW_CHAR", "KW_STRING", "KW_BOOL", "OP_ASSIGN", 
            "OP_EQUAL", "OP_NOT_EQUAL", "OP_LESS", "OP_LESS_EQ", "OP_GREATER", 
            "OP_GREATER_EQ", "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_MOD", 
            "OP_AND", "OP_OR", "OP_NOT", "OP_DOT", "OP_COLON", "OP_SEMICOLON", 
            "OP_COMMA", "OP_ARROW", "OP_LPAREN", "OP_RPAREN", "OP_LBRACKET", 
            "OP_RBRACKET", "LIT_INT", "LIT_FLOAT", "LIT_STRING", "LIT_CHAR", 
            "LIT_BOOL", "IDENTIFIER", "LINE_COMMENT", "MULTILINE_COMMENT", 
            "WS" ]

    ruleNames = [ "KW_BEGIN", "KW_END", "KW_IF", "KW_THEN", "KW_ELSE", "KW_LOOP", 
                  "KW_WHILE", "KW_FOR", "KW_IN", "KW_OUT", "KW_RETURN", 
                  "KW_PROCEDURE", "KW_FUNCTION", "KW_IS", "KW_TYPE", "KW_ARRAY", 
                  "KW_OF", "KW_CONST", "KW_USE", "KW_WITH", "KW_NEW", "KW_PRINT", 
                  "KW_LCURL", "KW_RCURL", "KW_INT", "KW_FLOAT", "KW_CHAR", 
                  "KW_STRING", "KW_BOOL", "OP_ASSIGN", "OP_EQUAL", "OP_NOT_EQUAL", 
                  "OP_LESS", "OP_LESS_EQ", "OP_GREATER", "OP_GREATER_EQ", 
                  "OP_ADD", "OP_SUB", "OP_MUL", "OP_DIV", "OP_MOD", "OP_AND", 
                  "OP_OR", "OP_NOT", "OP_DOT", "OP_COLON", "OP_SEMICOLON", 
                  "OP_COMMA", "OP_ARROW", "OP_LPAREN", "OP_RPAREN", "OP_LBRACKET", 
                  "OP_RBRACKET", "LIT_INT", "LIT_FLOAT", "LIT_STRING", "LIT_CHAR", 
                  "LIT_BOOL", "IDENTIFIER", "LINE_COMMENT", "MULTILINE_COMMENT", 
                  "WS" ]

    grammarFileName = "GreekBaseLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


