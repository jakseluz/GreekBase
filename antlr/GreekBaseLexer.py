# Generated from GreekBaseLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,55,350,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,
        1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
        1,32,1,32,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        4,47,284,8,47,11,47,12,47,285,1,48,4,48,289,8,48,11,48,12,48,290,
        1,48,1,48,4,48,295,8,48,11,48,12,48,296,1,49,1,49,5,49,301,8,49,
        10,49,12,49,304,9,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,5,51,
        314,8,51,10,51,12,51,317,9,51,1,52,1,52,1,52,1,52,5,52,323,8,52,
        10,52,12,52,326,9,52,1,52,1,52,1,53,1,53,1,53,1,53,5,53,334,8,53,
        10,53,12,53,337,9,53,1,53,1,53,1,53,1,53,1,53,1,54,4,54,345,8,54,
        11,54,12,54,346,1,54,1,54,1,335,0,55,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,1,0,7,1,0,48,57,3,0,10,10,13,13,34,
        34,3,0,48,57,65,90,97,122,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
        95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,357,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,
        53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,
        63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,
        73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,
        83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,
        93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,
        0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,1,111,1,
        0,0,0,3,117,1,0,0,0,5,121,1,0,0,0,7,124,1,0,0,0,9,129,1,0,0,0,11,
        134,1,0,0,0,13,139,1,0,0,0,15,145,1,0,0,0,17,149,1,0,0,0,19,152,
        1,0,0,0,21,156,1,0,0,0,23,163,1,0,0,0,25,173,1,0,0,0,27,182,1,0,
        0,0,29,185,1,0,0,0,31,190,1,0,0,0,33,196,1,0,0,0,35,199,1,0,0,0,
        37,205,1,0,0,0,39,209,1,0,0,0,41,214,1,0,0,0,43,218,1,0,0,0,45,220,
        1,0,0,0,47,222,1,0,0,0,49,225,1,0,0,0,51,227,1,0,0,0,53,230,1,0,
        0,0,55,232,1,0,0,0,57,235,1,0,0,0,59,237,1,0,0,0,61,240,1,0,0,0,
        63,242,1,0,0,0,65,244,1,0,0,0,67,246,1,0,0,0,69,248,1,0,0,0,71,252,
        1,0,0,0,73,256,1,0,0,0,75,259,1,0,0,0,77,263,1,0,0,0,79,265,1,0,
        0,0,81,267,1,0,0,0,83,269,1,0,0,0,85,271,1,0,0,0,87,274,1,0,0,0,
        89,276,1,0,0,0,91,278,1,0,0,0,93,280,1,0,0,0,95,283,1,0,0,0,97,288,
        1,0,0,0,99,298,1,0,0,0,101,307,1,0,0,0,103,311,1,0,0,0,105,318,1,
        0,0,0,107,329,1,0,0,0,109,344,1,0,0,0,111,112,5,98,0,0,112,113,5,
        101,0,0,113,114,5,103,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,
        2,1,0,0,0,117,118,5,101,0,0,118,119,5,110,0,0,119,120,5,100,0,0,
        120,4,1,0,0,0,121,122,5,105,0,0,122,123,5,102,0,0,123,6,1,0,0,0,
        124,125,5,116,0,0,125,126,5,104,0,0,126,127,5,101,0,0,127,128,5,
        110,0,0,128,8,1,0,0,0,129,130,5,101,0,0,130,131,5,108,0,0,131,132,
        5,115,0,0,132,133,5,101,0,0,133,10,1,0,0,0,134,135,5,108,0,0,135,
        136,5,111,0,0,136,137,5,111,0,0,137,138,5,112,0,0,138,12,1,0,0,0,
        139,140,5,119,0,0,140,141,5,104,0,0,141,142,5,105,0,0,142,143,5,
        108,0,0,143,144,5,101,0,0,144,14,1,0,0,0,145,146,5,102,0,0,146,147,
        5,111,0,0,147,148,5,114,0,0,148,16,1,0,0,0,149,150,5,105,0,0,150,
        151,5,110,0,0,151,18,1,0,0,0,152,153,5,111,0,0,153,154,5,117,0,0,
        154,155,5,116,0,0,155,20,1,0,0,0,156,157,5,114,0,0,157,158,5,101,
        0,0,158,159,5,116,0,0,159,160,5,117,0,0,160,161,5,114,0,0,161,162,
        5,110,0,0,162,22,1,0,0,0,163,164,5,112,0,0,164,165,5,114,0,0,165,
        166,5,111,0,0,166,167,5,99,0,0,167,168,5,101,0,0,168,169,5,100,0,
        0,169,170,5,117,0,0,170,171,5,114,0,0,171,172,5,101,0,0,172,24,1,
        0,0,0,173,174,5,102,0,0,174,175,5,117,0,0,175,176,5,110,0,0,176,
        177,5,99,0,0,177,178,5,116,0,0,178,179,5,105,0,0,179,180,5,111,0,
        0,180,181,5,110,0,0,181,26,1,0,0,0,182,183,5,105,0,0,183,184,5,115,
        0,0,184,28,1,0,0,0,185,186,5,116,0,0,186,187,5,121,0,0,187,188,5,
        112,0,0,188,189,5,101,0,0,189,30,1,0,0,0,190,191,5,97,0,0,191,192,
        5,114,0,0,192,193,5,114,0,0,193,194,5,97,0,0,194,195,5,121,0,0,195,
        32,1,0,0,0,196,197,5,111,0,0,197,198,5,102,0,0,198,34,1,0,0,0,199,
        200,5,99,0,0,200,201,5,111,0,0,201,202,5,110,0,0,202,203,5,115,0,
        0,203,204,5,116,0,0,204,36,1,0,0,0,205,206,5,117,0,0,206,207,5,115,
        0,0,207,208,5,101,0,0,208,38,1,0,0,0,209,210,5,119,0,0,210,211,5,
        105,0,0,211,212,5,116,0,0,212,213,5,104,0,0,213,40,1,0,0,0,214,215,
        5,110,0,0,215,216,5,101,0,0,216,217,5,119,0,0,217,42,1,0,0,0,218,
        219,5,123,0,0,219,44,1,0,0,0,220,221,5,125,0,0,221,46,1,0,0,0,222,
        223,5,58,0,0,223,224,5,61,0,0,224,48,1,0,0,0,225,226,5,61,0,0,226,
        50,1,0,0,0,227,228,5,47,0,0,228,229,5,61,0,0,229,52,1,0,0,0,230,
        231,5,60,0,0,231,54,1,0,0,0,232,233,5,60,0,0,233,234,5,61,0,0,234,
        56,1,0,0,0,235,236,5,62,0,0,236,58,1,0,0,0,237,238,5,62,0,0,238,
        239,5,61,0,0,239,60,1,0,0,0,240,241,5,43,0,0,241,62,1,0,0,0,242,
        243,5,45,0,0,243,64,1,0,0,0,244,245,5,42,0,0,245,66,1,0,0,0,246,
        247,5,47,0,0,247,68,1,0,0,0,248,249,5,109,0,0,249,250,5,111,0,0,
        250,251,5,100,0,0,251,70,1,0,0,0,252,253,5,97,0,0,253,254,5,110,
        0,0,254,255,5,100,0,0,255,72,1,0,0,0,256,257,5,111,0,0,257,258,5,
        114,0,0,258,74,1,0,0,0,259,260,5,110,0,0,260,261,5,111,0,0,261,262,
        5,116,0,0,262,76,1,0,0,0,263,264,5,46,0,0,264,78,1,0,0,0,265,266,
        5,58,0,0,266,80,1,0,0,0,267,268,5,59,0,0,268,82,1,0,0,0,269,270,
        5,44,0,0,270,84,1,0,0,0,271,272,5,61,0,0,272,273,5,62,0,0,273,86,
        1,0,0,0,274,275,5,40,0,0,275,88,1,0,0,0,276,277,5,41,0,0,277,90,
        1,0,0,0,278,279,5,91,0,0,279,92,1,0,0,0,280,281,5,93,0,0,281,94,
        1,0,0,0,282,284,7,0,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,
        1,0,0,0,285,286,1,0,0,0,286,96,1,0,0,0,287,289,7,0,0,0,288,287,1,
        0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,0,291,292,1,
        0,0,0,292,294,5,46,0,0,293,295,7,0,0,0,294,293,1,0,0,0,295,296,1,
        0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,98,1,0,0,0,298,302,5,34,
        0,0,299,301,8,1,0,0,300,299,1,0,0,0,301,304,1,0,0,0,302,300,1,0,
        0,0,302,303,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,306,5,34,
        0,0,306,100,1,0,0,0,307,308,5,39,0,0,308,309,7,2,0,0,309,310,5,39,
        0,0,310,102,1,0,0,0,311,315,7,3,0,0,312,314,7,4,0,0,313,312,1,0,
        0,0,314,317,1,0,0,0,315,313,1,0,0,0,315,316,1,0,0,0,316,104,1,0,
        0,0,317,315,1,0,0,0,318,319,5,45,0,0,319,320,5,45,0,0,320,324,1,
        0,0,0,321,323,8,5,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,1,
        0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,6,
        52,0,0,328,106,1,0,0,0,329,330,5,47,0,0,330,331,5,42,0,0,331,335,
        1,0,0,0,332,334,9,0,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,336,
        1,0,0,0,335,333,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,339,
        5,42,0,0,339,340,5,47,0,0,340,341,1,0,0,0,341,342,6,53,0,0,342,108,
        1,0,0,0,343,345,7,6,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,
        1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,349,6,54,0,0,349,110,
        1,0,0,0,9,0,285,290,296,302,315,324,335,346,1,6,0,0
    ]

class GreekBaseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    KW_BEGIN = 1
    KW_END = 2
    KW_IF = 3
    KW_THEN = 4
    KW_ELSE = 5
    KW_LOOP = 6
    KW_WHILE = 7
    KW_FOR = 8
    KW_IN = 9
    KW_OUT = 10
    KW_RETURN = 11
    KW_PROCEDURE = 12
    KW_FUNCTION = 13
    KW_IS = 14
    KW_TYPE = 15
    KW_ARRAY = 16
    KW_OF = 17
    KW_CONST = 18
    KW_USE = 19
    KW_WITH = 20
    KW_NEW = 21
    KW_LCURL = 22
    KW_RCURL = 23
    OP_ASSIGN = 24
    OP_EQUAL = 25
    OP_NOT_EQUAL = 26
    OP_LESS = 27
    OP_LESS_EQ = 28
    OP_GREATER = 29
    OP_GREATER_EQ = 30
    OP_PLUS = 31
    OP_MINUS = 32
    OP_MUL = 33
    OP_DIV = 34
    OP_MOD = 35
    OP_AND = 36
    OP_OR = 37
    OP_NOT = 38
    OP_DOT = 39
    OP_COLON = 40
    OP_SEMICOLON = 41
    OP_COMMA = 42
    OP_ARROW = 43
    OP_LPAREN = 44
    OP_RPAREN = 45
    OP_LBRACKET = 46
    OP_RBRACKET = 47
    LIT_INT = 48
    LIT_FLOAT = 49
    LIT_STRING = 50
    LIT_CHAR = 51
    IDENTIFIER = 52
    LINE_COMMENT = 53
    MULTILINE_COMMENT = 54
    WS = 55

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'begin'", "'end'", "'if'", "'then'", "'else'", "'loop'", "'while'", 
            "'for'", "'in'", "'out'", "'return'", "'procedure'", "'function'", 
            "'is'", "'type'", "'array'", "'of'", "'const'", "'use'", "'with'", 
            "'new'", "'{'", "'}'", "':='", "'='", "'/='", "'<'", "'<='", 
            "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'mod'", "'and'", 
            "'or'", "'not'", "'.'", "':'", "';'", "','", "'=>'", "'('", 
            "')'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>",
            "KW_BEGIN", "KW_END", "KW_IF", "KW_THEN", "KW_ELSE", "KW_LOOP", 
            "KW_WHILE", "KW_FOR", "KW_IN", "KW_OUT", "KW_RETURN", "KW_PROCEDURE", 
            "KW_FUNCTION", "KW_IS", "KW_TYPE", "KW_ARRAY", "KW_OF", "KW_CONST", 
            "KW_USE", "KW_WITH", "KW_NEW", "KW_LCURL", "KW_RCURL", "OP_ASSIGN", 
            "OP_EQUAL", "OP_NOT_EQUAL", "OP_LESS", "OP_LESS_EQ", "OP_GREATER", 
            "OP_GREATER_EQ", "OP_PLUS", "OP_MINUS", "OP_MUL", "OP_DIV", 
            "OP_MOD", "OP_AND", "OP_OR", "OP_NOT", "OP_DOT", "OP_COLON", 
            "OP_SEMICOLON", "OP_COMMA", "OP_ARROW", "OP_LPAREN", "OP_RPAREN", 
            "OP_LBRACKET", "OP_RBRACKET", "LIT_INT", "LIT_FLOAT", "LIT_STRING", 
            "LIT_CHAR", "IDENTIFIER", "LINE_COMMENT", "MULTILINE_COMMENT", 
            "WS" ]

    ruleNames = [ "KW_BEGIN", "KW_END", "KW_IF", "KW_THEN", "KW_ELSE", "KW_LOOP", 
                  "KW_WHILE", "KW_FOR", "KW_IN", "KW_OUT", "KW_RETURN", 
                  "KW_PROCEDURE", "KW_FUNCTION", "KW_IS", "KW_TYPE", "KW_ARRAY", 
                  "KW_OF", "KW_CONST", "KW_USE", "KW_WITH", "KW_NEW", "KW_LCURL", 
                  "KW_RCURL", "OP_ASSIGN", "OP_EQUAL", "OP_NOT_EQUAL", "OP_LESS", 
                  "OP_LESS_EQ", "OP_GREATER", "OP_GREATER_EQ", "OP_PLUS", 
                  "OP_MINUS", "OP_MUL", "OP_DIV", "OP_MOD", "OP_AND", "OP_OR", 
                  "OP_NOT", "OP_DOT", "OP_COLON", "OP_SEMICOLON", "OP_COMMA", 
                  "OP_ARROW", "OP_LPAREN", "OP_RPAREN", "OP_LBRACKET", "OP_RBRACKET", 
                  "LIT_INT", "LIT_FLOAT", "LIT_STRING", "LIT_CHAR", "IDENTIFIER", 
                  "LINE_COMMENT", "MULTILINE_COMMENT", "WS" ]

    grammarFileName = "GreekBaseLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


